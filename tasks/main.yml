# Copyright 2020-2025 Luke Murphy and Chris Croome
#
# This file is part of the Webarchitects Uncomplicated Firewall (UFW) Ansible role.
#
# The Webarchitects Uncomplicated Firewall (UFW) Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Uncomplicated Firewall (UFW) Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Uncomplicated Firewall (UFW) Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Skip the tasks in this role
  ansible.builtin.debug:
    msg: "The UFW role tasks are not being run since the ufw variable is false."
  when: not ufw | bool
  tags:
    - ufw

- name: Install and configure UFW
  block:

    - name: Verify variables that start with ufw_
      ansible.builtin.include_tasks: verify.yml
      when:
        - ufw_verify is defined
        - ufw_verify | bool

    - name: Include apt role local fact tasks
      ansible.builtin.include_role:
        name: apt
        tasks_from: local_facts.yml
      when: >-
        ( ansible_facts.ansible_local.dpkg.arch is not defined ) or
        ( ansible_facts.ansible_local.gpg.version is not defined ) or
        ( ansible_facts.ansible_local.bash.path is not defined )

    - name: UFW packages present
      ansible.builtin.apt:
        pkg: "{{ ufw_pkgs }}"
        state: present
        update_cache: true
      register: ufw_pkgs_present
      tags:
        - molecule-idempotence-notest

    - name: Re-read Ansible local facts  # noqa: no-handler
      ansible.builtin.setup:
        filter: ansible_local
      when:
        - ufw_pkgs_present is defined
        - ufw_pkgs_present.changed is defined
        - ufw_pkgs_present.changed | bool

    - name: End role as UFW ufw_apt_only is true
      ansible.builtin.meta: end_role
      when: ufw_apt_only | bool

    - name: "Stat {{ ufw_systemd_service_file }}"
      ansible.builtin.stat:
        path: "{{ ufw_systemd_service_file }}"
      register: ufw_system_service

    - name: The UFW systemd configuration file is missing
      ansible.builtin.fail:
        fail_msg: "The {{ ufw_systemd_service_file }} file could not be found."
      when: not ufw_system_service.stat.exists | bool

    - name: Enable the firewall as it needs to be enabled before it can be configured
      community.general.ufw:
        state: enabled
      notify: Restart ufw

    - name: UFW started as it needs to be started before it can be configured
      ansible.builtin.service:
        name: ufw
        state: started
      register: ufw_service

    - name: Debug ufw_service
      ansible.builtin.debug:
        var: ufw_service
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      tags:
        - debug

    - name: Include the UFW check tasks
      ansible.builtin.include_tasks: checks.yml

    # TODO
    # - name: UFW applications absent
    #   ansible.builtin.include_tasks: app_absent.yml
    #   vars:
    #     ufw_app_desc_jpq: "[?key=='{{ ufw_app.app }}'].value|[0].description"
    #     ufw_app_ports_jpq: "[?key=='{{ ufw_app.app }}'].value|[0].ports"
    #   loop: "{{ ufw_apps }}"
    #   loop_control:
    #     loop_var: ufw_app
    #     label: "{{ ufw_app.app }}"
    #   when:
    #     - ufw_apps is defined
    #     - ufw_apps != []
    #     - ufw_app.state == "absent"

    - name: Debug UFW applications present
      ansible.builtin.debug:
        msg:
          - "JMESPath description query: {{ ufw_app_desc_jpq }}"
          - "JMESPath ports query: {{ ufw_app_ports_jpq }}"
          - "UFW app: {{ ufw_app.app }}"
          - "UFW app desc: {{ ufw_app.desc }}"
          - "UFW app ports: {{ ufw_app.ports }}"
          - "UFW app state: {{ ufw_app.state }}"
          - "UWF existing app description: {{ ufw_apps_available_list | community.general.json_query(ufw_app_desc_jpq) }}"
          - "UFW existing app ports: {{ ufw_apps_available_list | community.general.json_query(ufw_app_ports_jpq) }}"
          - "UFW ufw_app: {{ ufw_app | ansible.builtin.to_nice_yaml }}"
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      vars:
        ufw_app_desc_jpq: "[?key=={{ ufw_app.app | ansible.builtin.quote }}].value|[0].description"
        ufw_app_ports_jpq: "[?key=={{ ufw_app.app | ansible.builtin.quote }}].value|[0].ports"
      loop: "{{ ufw_apps }}"
      loop_control:
        loop_var: ufw_app
        label: "{{ ufw_app.app }}"
      when:
        - ufw_apps is defined
        - ufw_apps != []
      tags:
        - debug

    - name: UFW applications present
      ansible.builtin.include_tasks: app_present.yml
      vars:
        ufw_app_desc_jpq: "[?key=={{ ufw_app.app | ansible.builtin.quote }}].value|[0].description"
        ufw_app_ports_jpq: "[?key=={{ ufw_app.app | ansible.builtin.quote }}].value|[0].ports"
      loop: "{{ ufw_apps }}"
      loop_control:
        loop_var: ufw_app
        label: "{{ ufw_app.app }}"
      when:
        - ufw_apps is defined
        - ufw_apps != []
        - ufw_app.state == "present"
        - ( ufw_app.desc != ufw_apps_available_list | community.general.json_query(ufw_app_desc_jpq) ) or ( ufw_app.ports != ufw_apps_available_list | community.general.json_query(ufw_app_ports_jpq) )

    # - name: Debug fail
    #   ansible.builtin.fail:

    - name: Include UFW config tasks
      ansible.builtin.include_tasks: config.yml
      loop: "{{ ufw_config }}"
      loop_control:
        loop_var: ufw_conf
        label: "{{ ufw_conf.path }}"
      when:
        - ufw_config is defined
        - ufw_config != {}

    # TODO: Only include the allow rule tasks if it is not already present
    - name: Include allow tasks
      ansible.builtin.include_tasks: allow.yml
      loop: "{{ ufw_allow_rules }}"
      loop_control:
        loop_var: ufw_rule
      when:
        - ufw_allow_rules is defined
        - ufw_allow_rules != []

    # TODO: Only include the deny rule tasks if it is not already present
    - name: Include deny tasks
      ansible.builtin.include_tasks: deny.yml
      loop: "{{ ufw_deny_rules }}"
      loop_control:
        loop_var: ufw_rule
      when:
        - ufw_deny_rules is defined
        - ufw_deny_rules != []

    - name: Policy deny
      community.general.ufw:
        policy: deny
        direction: incoming
      notify: Restart ufw
      when:
        - ufw_default_policy_deny is defined
        - ufw_default_policy_deny | bool

  when: ufw | bool
  tags:
    - ufw
...
