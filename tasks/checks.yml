# Copyright 2020-2024 Luke Murphy and Chris Croome
#
# This file is part of the Webarchitects Uncomplicated Firewall (UFW) Ansible role.
#
# The Webarchitects Uncomplicated Firewall (UFW) Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Uncomplicated Firewall (UFW) Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Uncomplicated Firewall (UFW) Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: UFW checks
  block:

    - name: Check that UFW is installed
      ansible.builtin.assert:
        that:
          - ( "ufw" in ansible_local.dpkg.installed )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "Please install ufw and run this role again."

    - name: Stat /etc/ufw/applications.d
      ansible.builtin.stat:
        path: /etc/ufw/applications.d
      register: ufw_applicatons_path

    - name: Include the /etc/ufw/applications.d/* checks
      ansible.builtin.include_tasks: check_apps.yml
      when: ufw_applicatons_path.stat.exists | bool

    - name: Debug allow rules
      ansible.builtin.debug:
        var: ufw_app_allow_rules
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug deny rules
      ansible.builtin.debug:
        var: ufw_app_deny_rules
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug apps available
      ansible.builtin.debug:
        var: ufw_apps_available_names
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug apps proposed
      ansible.builtin.debug:
        var: ufw_apps_proposed
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug apps proposed but absent
      ansible.builtin.debug:
        msg: "{{ ufw_apps_proposed_but_absent }}"
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug rules proposed compared with apps existing and proposed
      ansible.builtin.debug:
        msg:
          - "Allow rules not available:{% for ufw_allow_rule in ufw_app_allow_rules | ansible.builtin.difference(ufw_apps_available_names) %} {{ ufw_allow_rule }}{% if not loop.last %},{% endif %}{% endfor %}"
          - "Allow rules not available and not proposed:{% for ufw_allow_rule in ufw_app_allow_rules | ansible.builtin.difference(ufw_apps_proposed) | ansible.builtin.difference(ufw_apps_available_names) %} {{ ufw_allow_rule }}{% if not loop.last %},{% endif %}{% endfor %}"
          - "Deny rules not available:{% for ufw_deny_rule in ufw_app_deny_rules | ansible.builtin.difference(ufw_apps_available_names) %} {{ ufw_deny_rule }}{% if not loop.last %},{% endif %}{% endfor %}"
          - "Deny rules not available and not proposed:{% for ufw_deny_rule in ufw_app_deny_rules | ansible.builtin.difference(ufw_apps_proposed) | ansible.builtin.difference(ufw_apps_available_names) %} {{ ufw_deny_rule }}{% if not loop.last %},{% endif %}{% endfor %}"
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Check that all named allow rules have apps which are present or proposed
      ansible.builtin.assert:
        that:
          - ufw_app_allow_rules | ansible.builtin.difference(ufw_apps_proposed) | ansible.builtin.difference(ufw_apps_available_names) == []
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          A rule cannot be created for apps that are not present, apps for
          {% for ufw_allow_rule in ufw_app_allow_rules | ansible.builtin.difference(ufw_apps_proposed) | ansible.builtin.difference(ufw_apps_available_names) %}{{ ufw_allow_rule }}{% if not loop.last %}, {% endif %}{% endfor %}
          were not found in /etc/ufw/applications.d or the proposed ufw_apps dictionary."
      when:
        - ufw_allow_rules is defined
        - ufw_allow_rules != []
        - ufw_app_allow_rules is defined
        - ufw_app_allow_rules != []
        - ufw_apps_available_names is defined
        - ufw_apps_available_names != []

    - name: Check that all named deny rules have apps which are present or proposed
      ansible.builtin.assert:
        that:
          - ufw_app_deny_rules | ansible.builtin.difference(ufw_apps_proposed) | ansible.builtin.difference(ufw_apps_available_names) == []
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          A rule cannot be created for apps that are not present, apps for
          {% for ufw_deny_rule in ufw_app_deny_rules | ansible.builtin.difference(ufw_apps_proposed) | ansible.builtin.difference(ufw_apps_available_names) %}{{ ufw_deny_rule }}{% if not loop.last %}, {% endif %}{% endfor %}
          were not found in /etc/ufw/applications.d or the proposed ufw_apps dictionary."
      when:
        - ufw_deny_rules is defined
        - ufw_deny_rules != []
        - ufw_app_deny_rules is defined
        - ufw_app_deny_rules != []
        - ufw_apps_available_names is defined
        - ufw_apps_available_names != []

    - name: Loop through the allow rules to check that they have either app or ports and proto specified
      ansible.builtin.assert:
        that:
          - ( ufw_rule.app is defined ) or ( ( ufw_rule.port is defined ) and ( ufw_rule.proto is defined ) )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "Either app or port and protocol need to be defined"
      loop: "{{ ufw_allow_rules }}"
      loop_control:
        loop_var: ufw_rule
      when:
        - ufw_allow_rules is defined
        - ufw_allow_rules != []

    - name: Loop through the deny rules to check that ther have either app or ports and proto specified
      ansible.builtin.assert:
        that:
          - ( ufw_rule.app is defined ) or ( ( ufw_rule.port is defined ) and ( ufw_rule.proto is defined ) )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "Either app or port and protocol need to be defined"
      loop: "{{ ufw_deny_rules }}"
      loop_control:
        loop_var: ufw_rule
      when:
        - ufw_deny_rules is defined
        - ufw_deny_rules != []

    - name: Get the UFW status
      ansible.builtin.command: ufw status
      check_mode: false
      changed_when: false
      register: ufw_check_status

    - name: Set a fact for the UFW status
      ansible.builtin.set_fact:
        ufw_status: "{{ ufw_check_status.stdout | string | community.general.jc('ufw') }}"

    - name: Debug UFW status
      ansible.builtin.debug:
        var: ufw_status
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

  when: ufw | bool
  tags:
    - ufw
...
